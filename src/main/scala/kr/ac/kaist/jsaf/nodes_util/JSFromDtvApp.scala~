/*******************************************************************************
    Copyright (c) 2012-2013, KAIST.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

package kr.ac.kaist.jsaf.nodes_util

import java.io._
import java.util.{List => JList}
import edu.rice.cs.plt.tuple.{Option => JOption}
import kr.ac.kaist.jsaf.nodes._
import kr.ac.kaist.jsaf.scala_src.nodes._
import kr.ac.kaist.jsaf.scala_src.useful.Lists._
import kr.ac.kaist.jsaf.scala_src.useful.Options._
import kr.ac.kaist.jsaf.exceptions.UserError
import kr.ac.kaist.jsaf.useful.Useful
import scala.util.parsing.json.JSON

/* 
 * dirName: directory name which ends with '/'
 */
class JSFromDtvApp(dirName: String) extends Walker {
  private var fileNames: List[String] =
    List("main.js", "app/init.js")
  
  /* 
   * add file names of scenes to "fileNames" by parsing app.json (which contains where they are)
   */
  
  // valid test (check if "dirName" is valid or not)
  val file: File = new File(dirName)
  if (!file.isDirectory){
    throw new UserError("Need a directory instead of " + file.getCanonicalPath + ".")
  }

  // fetch scene names from app.json and add to the list
  val sceneNames: List[String] = getSceneNames
  val sceneFileNames: List[String] = sceneNames.map(x => "app/scenes/" + x + ".js")
  fileNames ++= sceneFileNames
  fileNames = fileNames.map(x => dirName + x)
  
  /* 
   * parses scene file names from app.json and returns a list of that
   */
  private def getSceneNames() : List[String]= {
    // test if there exist "app.json" or not
    val file: File = new File(dirName + "app.json")
    if (!file.exists){
      throw new UserError("Cannot find file " + file.getCanonicalPath + ".")
    }
    
    // read "app.json"
    // TODO(CHECK): can't we use in.read() instead of in.readLine()?
    val in: BufferedReader = Useful.utf8BufferedFileReader(file)
    var code: String = ""
    var line: String = in.readLine
    while (line != null){
      code = code + line
      line = in.readLine
    }
	
    // parse "app.json"
    // WARNING: Scala standard json library is slow and not very nice.
    val json = JSON.parseFull(code)
    
    // fetch scenes list
    val res: List[String] = json match{
      case Some(m:Map[String, Any]) => 
        try{
          m("scenes") match{
            case l: List[String] => l
            case _ => List[String]()
          }
        }catch { // the json file doesn't have "scenes" field
            case _ => List[String]()
        }
      case None => throw new UserError("Cannot parse app.json")
    }
    
    // return scenes list
    res
  }
  
  def getFileNames(): JList[String] = toJavaList(fileNames)
  def getScenes(): JList[String] = toJavaList(sceneNames) //JavaList
}